name: Build Windows Executable
on:
  push:
    branches:
      - "**"
    tags:
      - "*"

jobs:
  build:
    runs-on: windows-2025
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set Version
        id: set-version
        shell: bash
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION=${{ github.ref_name }}
          elif git describe --tags >/dev/null 2>&1; then
            VERSION=$(git describe --tags)
          else
            VERSION="v0.0.0-$(git rev-parse --short HEAD)"
          fi
          if [ -z "$VERSION" ]; then
            echo "Error: No git version number found!"
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Set up MSYS2
        id: msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            base-devel
            git
            mingw-w64-x86_64-adwaita-icon-theme
            mingw-w64-x86_64-angleproject
            mingw-w64-x86_64-cairo
            mingw-w64-x86_64-cython
            mingw-w64-x86_64-gettext
            mingw-w64-x86_64-gobject-introspection
            mingw-w64-x86_64-gobject-introspection-runtime
            mingw-w64-x86_64-gtk4
            mingw-w64-x86_64-imagemagick
            mingw-w64-x86_64-libadwaita
            mingw-w64-x86_64-libffi
            mingw-w64-x86_64-libheif
            mingw-w64-x86_64-libvips
            mingw-w64-x86_64-meson
            mingw-w64-x86_64-ntldd
            mingw-w64-x86_64-opencv
            mingw-w64-x86_64-openslide
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-poppler
            mingw-w64-x86_64-pyinstaller
            mingw-w64-x86_64-python
            mingw-w64-x86_64-python-aiohttp
            mingw-w64-x86_64-python-blinker
            mingw-w64-x86_64-python-cairo
            mingw-w64-x86_64-python-cffi
            mingw-w64-x86_64-python-gobject
            mingw-w64-x86_64-python-maturin
            mingw-w64-x86_64-python-numpy
            mingw-w64-x86_64-python-opencv
            mingw-w64-x86_64-python-pip
            mingw-w64-x86_64-python-platformdirs
            mingw-w64-x86_64-python-poetry-core
            mingw-w64-x86_64-python-pyopengl
            mingw-w64-x86_64-python-pyopengl-accelerate
            mingw-w64-x86_64-python-pytest-asyncio
            mingw-w64-x86_64-python-pytest-cov
            mingw-w64-x86_64-python-pytest-mock
            mingw-w64-x86_64-python-scipy
            mingw-w64-x86_64-python-svgelements
            mingw-w64-x86_64-python-websockets
            mingw-w64-x86_64-python-yaml
            mingw-w64-x86_64-rust
            mingw-w64-x86_64-toolchain
            unzip
            wget
            autoconf
            automake
            libtool

      - name: Set up environment
        shell: msys2 {0}
        run: |
          MSYS2_PATH=$(echo "${{ steps.msys2.outputs.msys2-location }}" | sed 's|^\([A-Z]\):[/\\]|/d/|g; s|\\|/|g')
          echo "MSYS2_PATH=$MSYS2_PATH" >> $GITHUB_ENV
          echo "$MSYS2_PATH/mingw64/bin" >> $GITHUB_PATH
          echo "$MSYS2_PATH/usr/bin" >> $GITHUB_PATH
          echo "MSYS2_PATH=$MSYS2_PATH" > $GITHUB_WORKSPACE/.msys2_env
          echo "PKG_CONFIG_PATH=$MSYS2_PATH/mingw64/lib/pkgconfig" >> $GITHUB_WORKSPACE/.msys2_env
          echo "GI_TYPELIB_PATH=$MSYS2_PATH/mingw64/lib/girepository-1.0" >> $GITHUB_WORKSPACE/.msys2_env
          echo "LD_LIBRARY_PATH=$MSYS2_PATH/mingw64/lib" >> $GITHUB_WORKSPACE/.msys2_env
          # Dynamically determine Python version
          PYTHON_VERSION=$($MSYS2_PATH/mingw64/bin/python -c "import sys; print(f'python{sys.version_info.major}.{sys.version_info.minor}')")
          echo "PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV
          echo "PYTHONPATH=$MSYS2_PATH/mingw64/lib/$PYTHON_VERSION/site-packages:$PYTHONPATH" >> $GITHUB_WORKSPACE/.msys2_env
          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH"
          echo "PATH=$PATH"
          $MSYS2_PATH/mingw64/bin/python --version
          $MSYS2_PATH/mingw64/bin/gcc --version
          $MSYS2_PATH/mingw64/bin/python -c "import cffi; print(cffi.__version__)"

      - name: Verify GI Typelib Files
        shell: msys2 {0}
        if: false
        run: |
          source $GITHUB_WORKSPACE/.msys2_env
          echo "Listing GI typelib files:"
          ls -l $GI_TYPELIB_PATH/*.typelib

      - name: List MSYS2 packages
        shell: msys2 {0}
        if: false
        run: |
          source $GITHUB_WORKSPACE/.msys2_env
          pacman --version
          pacman -Q

      - name: Check Cairo DLL Dependencies
        shell: msys2 {0}
        if: false
        run: |
          source $GITHUB_WORKSPACE/.msys2_env
          $MSYS2_PATH/mingw64/bin/ntldd -R $MSYS2_PATH/mingw64/bin/libcairo-2.dll
          $MSYS2_PATH/mingw64/bin/ntldd -R $MSYS2_PATH/mingw64/bin/libcairo-gobject-2.dll
          $MSYS2_PATH/mingw64/bin/objdump -p $MSYS2_PATH/mingw64/bin/libcairo-2.dll | grep "DLL Name"
          $MSYS2_PATH/mingw64/bin/objdump -p $MSYS2_PATH/mingw64/bin/libcairo-gobject-2.dll | grep "DLL Name"

      - name: Install Python dependencies
        shell: msys2 {0}
        run: |
          source $GITHUB_WORKSPACE/.msys2_env

          python -m pip install --upgrade pip --break-system-packages
          python -m pip install --no-cache-dir --no-build-isolation vtracer==0.6.11 --break-system-packages
          python -m pip install --no-cache-dir pyserial_asyncio==0.6 ezdxf==1.3.5 pypdf==5.3.1 --break-system-packages
          python -m pip install --no-cache-dir pyclipper==1.3.0.post6 --break-system-packages
          python -m pip install --no-cache-dir --no-build-isolation --no-deps pyvips==3.0.0 --break-system-packages

          # Verify PyCairo is correct from the base MSYS2 install
          python -c "import cairo; print('PyCairo version:', cairo.version)"

      - name: Run pytest
        shell: msys2 {0}
        run: |
          source $GITHUB_WORKSPACE/.msys2_env
          $MSYS2_PATH/mingw64/bin/python -m pytest

      - name: Configure GTK Theme
        shell: msys2 {0}
        run: |
          mkdir -p etc/gtk-4.0
          echo "[Settings]" > etc/gtk-4.0/settings.ini
          echo "gtk-theme-name=Windows10" >> etc/gtk-4.0/settings.ini
          echo "gtk-font-name=Segoe UI 9" >> etc/gtk-4.0/settings.ini

      - name: Compile translations
        shell: msys2 {0}
        run: |
          source $GITHUB_WORKSPACE/.msys2_env
          echo "Compiling translations..."
          find rayforge/ -name "*.py" | xgettext --from-code=UTF-8 -o rayforge/locale/rayforge.pot -f -
          for lang_dir in rayforge/locale/*/; do
            lang=$(basename "$lang_dir")
            if [ -d "$lang_dir/LC_MESSAGES" ]; then
              msgmerge --update "$lang_dir/LC_MESSAGES/rayforge.po" rayforge/locale/rayforge.pot
              msgfmt "$lang_dir/LC_MESSAGES/rayforge.po" -o "$lang_dir/LC_MESSAGES/rayforge.mo"
            fi
          done
          ls -l rayforge/locale/*/LC_MESSAGES/

      - name: Build with PyInstaller
        shell: msys2 {0}
        env:
          GI_TYPELIB_PATH: ${{ steps.msys2.outputs.msys2-location }}/mingw64/lib/girepository-1.0
        run: |
          source $GITHUB_WORKSPACE/.msys2_env
          pyinstaller --onefile --noconsole \
            --log-level DEBUG \
            --name rayforge-v${{ steps.set-version.outputs.version }} \
            --add-data "rayforge/resources:rayforge/resources" \
            --add-data "rayforge/locale:rayforge/locale" \
            --add-data "${{ steps.msys2.outputs.msys2-location }}\mingw64\share\glib-2.0\schemas;glib-2.0\schemas" \
            --add-data "${{ steps.msys2.outputs.msys2-location }}\mingw64\share\icons;share\icons" \
            --add-data "${{ steps.msys2.outputs.msys2-location }}\mingw64\lib\girepository-1.0;gi\repository" \
            --add-binary "${{ steps.msys2.outputs.msys2-location }}\mingw64\bin\libEGL.dll;." \
            --add-binary "${{ steps.msys2.outputs.msys2-location }}\mingw64\bin\libGLESv2.dll;." \
            --add-binary "${{ steps.msys2.outputs.msys2-location }}\mingw64\bin\libvips-42.dll;." \
            --hidden-import gi._gi_cairo \
            rayforge/app.py

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: rayforge-v${{ steps.set-version.outputs.version }}.zip
          path: dist/rayforge-v${{ steps.set-version.outputs.version }}.exe
          compression-level: 9

  test-exe:
    name: Test Executable
    needs: build
    runs-on: windows-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: rayforge-v${{ needs.build.outputs.version }}.zip

      - name: Test Executable
        shell: bash
        run: |
          echo "Listing files in current directory:"
          ls -l
          echo "Running executable with --help:"
          ./rayforge-v${{ needs.build.outputs.version }}.exe --help

  release:
    name: Create GitHub Release
    needs: [build, test-exe]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: rayforge-v${{ needs.build.outputs.version }}.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: rayforge-v${{ needs.build.outputs.version }}.exe
          draft: false
          prerelease: false
          name: Release ${{ needs.build.outputs.version }}
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
